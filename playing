parameter_to_string_orig = DeviceParameterComponent.parameter_to_string

    def parameter_to_string(self, parameter):
        return 'Hello'
        #return parameter_to_string_orig(self, parameter)

    DeviceParameterComponent.parameter_to_string = parameter_to_string



    _get_provided_parameters_orig = DeviceComponent._get_provided_parameters

    def _get_provided_parameters(self):
        ret = _get_provided_parameters_orig(self)

        ret = map(lambda p: ParameterInfo(name = 'Hello', parameter=p.parameter, default_encoder_sensitivity=p.default_encoder_sensitivity, fine_grain_encoder_sensitivity=p.fine_grain_encoder_sensitivity), ret)

        #with open('/tmp/hello', 'a') as f:
        #    f.write(str(ret) + '\n')

        #p = ParameterInfo(name = 'Hello', parameter=ret[0].parameter, default_encoder_sensitivity=ret[0].default_encoder_sensitivity, fine_grain_encoder_sensitivity=ret[0].fine_grain_encoder_sensitivity)
        #ret[0] = p

        return ret

    DeviceComponent._get_provided_parameters = _get_provided_parameters





    # DeviceComponent::_assign_parameters
    # _assign_parameters_orig = DeviceComponent._assign_parameters

    # def _assign_parameters(self):
    #     log.info('_assign_parameters')

    #     orig_params = _assign_parameters_orig(self)
    #     return orig_params

    # DeviceComponent._assign_parameters = _assign_parameters

    # _setup_bank_orig = DeviceComponent._setup_bank

    # def _setup_bank(self, device, bank_factory = create_device_bank):
    #     with open('/tmp/hello', 'a') as f:
    #         f.write('setup_bank ' + str(device) + '\n')
    #         f.write('setup_bank ' + str(self._banking_info) + '\n')
    #         #f.write('setup_bank ' + str(bank_factory) + '\n')
    #         #f.write('setup_bank ' + str(device_parameter_bank.create_device_bank) + '\n')
    #     return _setup_bank_orig(device, bank_factory)

    #DeviceComponent._setup_bank = _setup_bank

    # DeviceParameterComponent
    # def _update_parameter_names(self):
    #     if self.is_enabled():
    #         params = zip(chain(self.parameter_provider.parameters, repeat(None)), self._parameter_name_data_sources)
    #         for info, name_data_source in params:
    #             parameter = info and info.parameter
    #             name = info and info.name or ''
    #             if parameter and parameter.automation_state != AutomationState.none:
    #                 name = consts.CHAR_FULL_BLOCK + name
    #             name_data_source.set_display_string(name or '')

    #     return

    # DeviceParameterComponent._update_parameter_names = _update_parameter_names

    #f.close()

    # DeviceComponent
    # update_orig = DeviceComponent.update

    # def update(self):
    #     log.info('update')
    #     update_orig(self)

    # DeviceComponent.update = update




    #orig_device_bank_definition = banking_util.device_bank_definition

    # def device_bank_definition(device, definitions):
    #     #original_definition = definitions.get(device.class_name, None)
    #     #definition = deepcopy(original_definition) if original_definition is not None else None
    #     #return definition

    #     orig =  orig_device_bank_definition(device, definitions)
    #     with open('/tmp/hello', 'a') as f:
    #         f.write(str(orig) + '\n')

    #     #return orig

    #     return IndexedDict([
    #         ('Hello', {
    #             'Parameters': ('Formant Shift')
    #         })
    #     ])

    # banking_util.device_bank_definition = device_bank_definition

    # DeviceParameterBank

    # create_device_bank_orig = device_parameter_bank.create_device_bank

    # def create_device_bank(device, banking_info):
    #     with open('/tmp/hello', 'a') as f:
    #         f.write('create_device_bank ' + str(device))
    #         f.write('create_device_bank ' + str(banking_info))
    #     return create_device_bank_orig(device, banking_info)

    #device_parameter_bank.create_device_bank = create_device_bank

    # DeviceComponent::_get_provided_parameters



    # # DeviceParameterBank - doesn't work
    # def name(self):
    #     f.write('name\n')
    #     return 'hello'

    # DeviceParameterBank.name = name

    # DescribedDeviceParameterBank.name = name

    # BankingUtil::device_bank_names







    # Generic.Devices
    # Not sure we need this
    # number_of_parameter_banks
    # number_of_parameter_banks_orig = Devices.number_of_parameter_banks

    # def number_of_parameter_banks(device, device_dict = Devices.DEVICE_DICT):
    #     ubermap_banks = ubermap.get_custom_device_banks(device)
    #     if ubermap_banks:
    #         log.info('ubermap number_of_parameter_banks ' + str(len(ubermap_banks)))
    #         return len(ubermap_banks)

    #     orig = number_of_parameter_banks_orig(device, device_dict)
    #     log.info('number_of_parameter_banks ' + str(orig))
    #     return orig

    # Devices.number_of_parameter_banks = number_of_parameter_banks

    # # parameter_banks
    # parameter_banks_orig = Devices.parameter_banks

    # def parameter_banks(device, device_dict = Devices.DEVICE_DICT):
    #     ubermap_banks = ubermap.get_custom_device_banks(device)
    #     if ubermap_banks:
    #         log.info('ubermap parameter_banks ' + str(ubermap_banks))
    #         return ubermap_banks

    #     orig = parameter_banks_orig(device, device_dict)
    #     log.info('parameter_banks: ' + str(orig))
    #     return orig

    # Devices.parameter_banks = parameter_banks

    # # parameter_bank_names
    # parameter_bank_names_orig = Devices.parameter_bank_names

    # def parameter_bank_names(device, device_dict = Devices.DEVICE_DICT):
    #     ubermap_banks = ubermap.get_custom_device_banks(device)
    #     if ubermap_banks:
    #         log.info('ubermap parameter_bank_names ' + str(ubermap_banks))
    #         return ubermap_banks

    #     orig = parameter_bank_names_orig(device, device_dict)
    #     log.info('parameter_bank_names: ' + str(orig))
    #     return orig

    # Devices.parameter_bank_names = parameter_bank_names
